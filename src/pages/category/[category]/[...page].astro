---
import type { PaginateFunction, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import { PAGE_SIZE, getPosts } from '../../../config'
import Base from '../../../layouts/base.astro'
import PageHero from '../../../components/pagehero.astro'
import BlogRoll from '../../../components/blogroll.astro'
import PaginateControl from '../../../components/paginatecontrol.astro'

export interface Props {
  page: Page<CollectionEntry<'blog'>>
}

const { category } = Astro.params
const { page } = Astro.props

const detail = await getEntry('category', category!)

const frontmatter: CollectionEntry<'page'>['data'] = {
  title:
    'Category: ' +
    category +
    (page.size < page.total ? ' (page ' + page.currentPage + ' of ' + page.lastPage + ')' : ''),
  description: detail!.data.description,
  coverSVG: detail!.data.coverSVG,
  socialImage: detail!.data.socialImage
}

const currentPage = Astro.url.pathname.replace(/(\/\d*)?\/$/, '')

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const categories = await getCollection('category')
  const posts = await getPosts()

  return categories.flatMap((category) => {
    return paginate(
      posts.filter(
        (post) =>
          category && post.data.categories!.map((category) => category.slug).includes(category.slug)
      ),
      {
        params: { category: category.slug },
        pageSize: PAGE_SIZE
      }
    )
  })
}
---

<Base frontmatter={frontmatter} schema='CollectionPage'>
  <header>
    <PageHero
      title={frontmatter.title}
      description={frontmatter.description}
      coverSVG={frontmatter.coverSVG}
      socialImage={frontmatter.socialImage}
    >
      <PaginateControl base={currentPage} page={page} />
    </PageHero>
  </header>
  <main itemprop='mainContentOfPage' class='mt-10 bg-gray-100 dark:bg-gray-900'>
    <BlogRoll posts={page.data} />
  </main>
</Base>
